// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var S$RescriptSchema = require("rescript-schema/src/S.bs.js");

function mkField($$default, isArrayOpt, isNullableOpt, isPrimaryKeyOpt, isIndexOpt, linkedEntity, fieldName, fieldType) {
  var isArray = isArrayOpt !== undefined ? isArrayOpt : false;
  var isNullable = isNullableOpt !== undefined ? isNullableOpt : false;
  var isPrimaryKey = isPrimaryKeyOpt !== undefined ? isPrimaryKeyOpt : false;
  var isIndex = isIndexOpt !== undefined ? isIndexOpt : false;
  return {
          TAG: "Field",
          _0: {
            fieldName: fieldName,
            fieldType: fieldType,
            isArray: isArray,
            isNullable: isNullable,
            isPrimaryKey: isPrimaryKey,
            isIndex: isIndex,
            linkedEntity: linkedEntity,
            defaultValue: $$default
          }
        };
}

function mkDerivedFromField(fieldName, derivedFromEntity, derivedFromField) {
  return {
          TAG: "DerivedFrom",
          _0: {
            fieldName: fieldName,
            derivedFromEntity: derivedFromEntity,
            derivedFromField: derivedFromField
          }
        };
}

function getUserDefinedFieldName(fieldOrDerived) {
  return fieldOrDerived._0.fieldName;
}

function isLinkedEntityField(field) {
  return Belt_Option.isSome(field.linkedEntity);
}

function getDbFieldName(field) {
  if (Belt_Option.isSome(field.linkedEntity)) {
    return field.fieldName + "_id";
  } else {
    return field.fieldName;
  }
}

function getFieldName(fieldOrDerived) {
  if (fieldOrDerived.TAG === "Field") {
    return getDbFieldName(fieldOrDerived._0);
  } else {
    return fieldOrDerived._0.fieldName;
  }
}

function mkTable(compositeIndicesOpt, fields, tableName) {
  var compositeIndices = compositeIndicesOpt !== undefined ? compositeIndicesOpt : [];
  return {
          tableName: tableName,
          fields: fields,
          compositeIndices: compositeIndices
        };
}

function getPrimaryKeyFieldNames(table) {
  return Belt_Array.keepMap(table.fields, (function (field) {
                if (field.TAG !== "Field") {
                  return ;
                }
                var match = field._0;
                if (match.isPrimaryKey) {
                  return match.fieldName;
                }
                
              }));
}

function getFields(table) {
  return Belt_Array.keepMap(table.fields, (function (field) {
                if (field.TAG === "Field") {
                  return field._0;
                }
                
              }));
}

function getNonDefaultFields(table) {
  return Belt_Array.keepMap(table.fields, (function (field) {
                if (field.TAG !== "Field") {
                  return ;
                }
                var field$1 = field._0;
                if (Belt_Option.isNone(field$1.defaultValue)) {
                  return field$1;
                }
                
              }));
}

function getLinkedEntityFields(table) {
  return Belt_Array.keepMap(table.fields, (function (field) {
                if (field.TAG !== "Field") {
                  return ;
                }
                var field$1 = field._0;
                var linkedEntityName = field$1.linkedEntity;
                if (linkedEntityName !== undefined) {
                  return [
                          field$1,
                          linkedEntityName
                        ];
                }
                
              }));
}

function getDerivedFromFields(table) {
  return Belt_Array.keepMap(table.fields, (function (field) {
                if (field.TAG === "Field") {
                  return ;
                } else {
                  return field._0;
                }
              }));
}

function getFieldNames(table) {
  return Belt_Array.map(getFields(table), getDbFieldName);
}

function getNonDefaultFieldNames(table) {
  return Belt_Array.map(getNonDefaultFields(table), getDbFieldName);
}

function getFieldByName(table, fieldNameSearch) {
  return Caml_option.undefined_to_opt(table.fields.find(function (field) {
                  return field._0.fieldName === fieldNameSearch;
                }));
}

var NonExistingTableField = /* @__PURE__ */Caml_exceptions.create("Table.NonExistingTableField");

function getUnfilteredCompositeIndicesUnsafe(table) {
  return Belt_Array.map(table.compositeIndices, (function (compositeIndex) {
                return Belt_Array.map(compositeIndex, (function (userDefinedFieldName) {
                              var field = getFieldByName(table, userDefinedFieldName);
                              if (field !== undefined) {
                                return getFieldName(field);
                              }
                              throw {
                                    RE_EXN_ID: NonExistingTableField,
                                    _1: userDefinedFieldName,
                                    Error: new Error()
                                  };
                            }));
              }));
}

function getSingleIndices(table) {
  var indexFields = Belt_Array.keepMap(table.fields, (function (field) {
          if (field.TAG !== "Field") {
            return ;
          }
          var field$1 = field._0;
          if (field$1.isIndex) {
            return getDbFieldName(field$1);
          }
          
        }));
  return Belt_SetString.toArray(Belt_SetString.fromArray(Belt_Array.concatMany(Belt_Array.concat(Belt_Array.keep(getUnfilteredCompositeIndicesUnsafe(table), (function (cidx) {
                                  return cidx.length === 1;
                                })), [indexFields])))).sort();
}

function getCompositeIndices(table) {
  return Belt_Array.keep(getUnfilteredCompositeIndicesUnsafe(table), (function (ind) {
                return ind.length > 1;
              }));
}

function makeBatchSetFnString(table) {
  var fieldNamesInQuotes = Belt_Array.map(getNonDefaultFieldNames(table), (function (fieldName) {
          return "\"" + fieldName + "\"";
        }));
  return "(sql, rows) => {\n      return sql\`\n        INSERT INTO \"public\".\"" + table.tableName + "\"\n        \${sql(rows, " + fieldNamesInQuotes.join(", ") + ")}\n        ON CONFLICT(" + getPrimaryKeyFieldNames(table).join(", ") + ") DO UPDATE\n        SET\n        " + Belt_Array.map(fieldNamesInQuotes, (function (fieldNameInQuotes) {
                  return fieldNameInQuotes + " = EXCLUDED." + fieldNameInQuotes;
                })).join(", ") + ";\`\n    }";
}

function chunkBatchQuery(sql, entityDataArray, queryToExecute, maxItemsPerQueryOpt) {
  var maxItemsPerQuery = maxItemsPerQueryOpt !== undefined ? maxItemsPerQueryOpt : 500;
  var responses = [];
  var i = 0;
  while(i < entityDataArray.length) {
    var chunk = entityDataArray.slice(i, i + maxItemsPerQuery | 0);
    var response = queryToExecute(sql, chunk);
    responses.push(response);
    i = i + maxItemsPerQuery | 0;
  };
  return Promise.all(responses);
}

function makeBatchSetFn(table, rowsSchema) {
  var batchSetFn = eval(makeBatchSetFnString(table));
  return async function (sql, rows) {
    var rowsJson = S$RescriptSchema.serializeOrRaiseWith(rows, rowsSchema);
    await chunkBatchQuery(sql, rowsJson, batchSetFn, undefined);
  };
}

var PostgresInterop = {
  makeBatchSetFnString: makeBatchSetFnString,
  chunkBatchQuery: chunkBatchQuery,
  makeBatchSetFn: makeBatchSetFn
};

exports.mkField = mkField;
exports.mkDerivedFromField = mkDerivedFromField;
exports.getUserDefinedFieldName = getUserDefinedFieldName;
exports.isLinkedEntityField = isLinkedEntityField;
exports.getDbFieldName = getDbFieldName;
exports.getFieldName = getFieldName;
exports.mkTable = mkTable;
exports.getPrimaryKeyFieldNames = getPrimaryKeyFieldNames;
exports.getFields = getFields;
exports.getNonDefaultFields = getNonDefaultFields;
exports.getLinkedEntityFields = getLinkedEntityFields;
exports.getDerivedFromFields = getDerivedFromFields;
exports.getFieldNames = getFieldNames;
exports.getNonDefaultFieldNames = getNonDefaultFieldNames;
exports.getFieldByName = getFieldByName;
exports.NonExistingTableField = NonExistingTableField;
exports.getUnfilteredCompositeIndicesUnsafe = getUnfilteredCompositeIndicesUnsafe;
exports.getSingleIndices = getSingleIndices;
exports.getCompositeIndices = getCompositeIndices;
exports.PostgresInterop = PostgresInterop;
/* S-RescriptSchema Not a pure module */
