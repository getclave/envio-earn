// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ethers = require("ethers");
var Address = require("../Address.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function makeAbi(abi) {
  return abi;
}

var getAddressFromStringUnsafe = Address.Evm.fromStringOrThrow;

function ethAddressToString(prim) {
  return prim;
}

var Constants = {};

var mockAddresses = Belt_Array.map([
      "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
      "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
      "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
      "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
      "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65",
      "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc",
      "0x976EA74026E726554dB657fA54763abd0C3a0aa9",
      "0x14dC79964da2C08b23698B3D3cc7Ca32193d9955",
      "0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f",
      "0xa0Ee7A142d267C1f36714E4a8F75612F20a79720",
      "0xBcd4042DE499D14e55001CcbB24a551F3b954096",
      "0x71bE63f3384f5fb98995898A86B02Fb2426c5788",
      "0xFABB0ac9d68B0B445fB7357272Ff202C5651694a",
      "0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec",
      "0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097",
      "0xcd3B766CCDd6AE721141F452C550Ca635964ce71",
      "0x2546BcD3c84621e976D8185a91A922aE77ECEc30",
      "0xbDA5747bFD65F08deb54cb465eB87D40e51B197E",
      "0xdD2FD4581271e230360230F9337D5c0430Bf44C0",
      "0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199"
    ], getAddressFromStringUnsafe);

var defaultAddress = Caml_array.get(mockAddresses, 0);

var Addresses = {
  mockAddresses: mockAddresses,
  defaultAddress: defaultAddress
};

function blockTagFromSemantic(semanticTag) {
  return semanticTag;
}

function blockTagFromBlockNumber(blockNumber) {
  return blockNumber;
}

function blockTagFromHexString(hexString) {
  return hexString;
}

function blockTagFromVariant(variant) {
  if (typeof variant === "object") {
    return variant._0;
  }
  switch (variant) {
    case "Latest" :
        return "latest";
    case "Earliest" :
        return "earliest";
    case "Pending" :
        return "pending";
    
  }
}

var BlockTag = {
  blockTagFromSemantic: blockTagFromSemantic,
  blockTagFromBlockNumber: blockTagFromBlockNumber,
  blockTagFromHexString: blockTagFromHexString,
  blockTagFromVariant: blockTagFromVariant
};

var EventFilter = {};

function filterFromRecord(filterRecord) {
  return filterRecord;
}

var Filter = {
  filterFromRecord: filterFromRecord
};

function combinedFilterToFilter(combinedFilter) {
  return combinedFilter;
}

var CombinedFilter = {
  combinedFilterToFilter: combinedFilterToFilter
};

function logToMinimumParseableLogData(prim) {
  return prim;
}

var Network = {};

function makeStatic(rpcUrl, network, priority, stallTimeout) {
  return new (Ethers.ethers.JsonRpcProvider)(rpcUrl, network, {
              staticNetwork: Caml_option.some(network),
              stallTimeout: stallTimeout,
              priority: priority
            });
}

function make(rpcUrls, chainId, fallbackStallTimeout) {
  var network = Ethers.Network.from(chainId);
  if (rpcUrls.length !== 1) {
    return new (Ethers.ethers.FallbackProvider)(rpcUrls.map(function (rpcUrl, index) {
                    return makeStatic(rpcUrl, network, index, fallbackStallTimeout);
                  }), network, {
                quorum: 1
              });
  }
  var rpcUrl = rpcUrls[0];
  return makeStatic(rpcUrl, network, undefined, undefined);
}

function makeGetTransactionFields(getTransactionByHash) {
  return async function (log) {
    var transaction = await getTransactionByHash(log.transactionHash);
    transaction.transactionIndex = log.transactionIndex;
    transaction.input = transaction.data;
    return transaction;
  };
}

function onBlock(t, callback) {
  t.on("block", callback);
}

function removeOnBlockEventListener(t) {
  t.off("block");
}

var JsonRpcProvider = {
  makeStatic: makeStatic,
  make: make,
  makeGetTransactionFields: makeGetTransactionFields,
  onBlock: onBlock,
  removeOnBlockEventListener: removeOnBlockEventListener
};

var ethAddressSchema = Address.schema;

exports.makeAbi = makeAbi;
exports.getAddressFromStringUnsafe = getAddressFromStringUnsafe;
exports.ethAddressToString = ethAddressToString;
exports.ethAddressSchema = ethAddressSchema;
exports.Constants = Constants;
exports.Addresses = Addresses;
exports.BlockTag = BlockTag;
exports.EventFilter = EventFilter;
exports.Filter = Filter;
exports.CombinedFilter = CombinedFilter;
exports.logToMinimumParseableLogData = logToMinimumParseableLogData;
exports.Network = Network;
exports.JsonRpcProvider = JsonRpcProvider;
/* mockAddresses Not a pure module */
