// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Utils = require("./Utils.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");

var MissingRequiredTopic0 = /* @__PURE__ */Caml_exceptions.create("LogSelection.MissingRequiredTopic0");

function makeTopicSelection(topic0, topic1Opt, topic2Opt, topic3Opt) {
  var topic1 = topic1Opt !== undefined ? topic1Opt : [];
  var topic2 = topic2Opt !== undefined ? topic2Opt : [];
  var topic3 = topic3Opt !== undefined ? topic3Opt : [];
  if (Utils.$$Array.isEmpty(topic0)) {
    return {
            TAG: "Error",
            _0: {
              RE_EXN_ID: MissingRequiredTopic0
            }
          };
  } else {
    return {
            TAG: "Ok",
            _0: {
              topic0: topic0,
              topic1: topic1,
              topic2: topic2,
              topic3: topic3
            }
          };
  }
}

function hasFilters(param) {
  return Belt_Option.isSome(Caml_option.undefined_to_opt([
                    param.topic1,
                    param.topic2,
                    param.topic3
                  ].find(function (topic) {
                      return !Utils.$$Array.isEmpty(topic);
                    })));
}

function compressTopicSelectionsOrThrow(topicSelections) {
  var topic0sOfSelectionsWithoutFilters = [];
  var selectionsWithFilters = [];
  Belt_Array.forEach(topicSelections, (function (selection) {
          if (hasFilters(selection)) {
            selectionsWithFilters.push(selection);
            return ;
          } else {
            return Belt_Array.forEach(selection.topic0, (function (topic0) {
                          topic0sOfSelectionsWithoutFilters.push(topic0);
                        }));
          }
        }));
  if (topic0sOfSelectionsWithoutFilters.length === 0) {
    return selectionsWithFilters;
  }
  var selectionWithoutFilters = Utils.unwrapResultExn(makeTopicSelection(topic0sOfSelectionsWithoutFilters, undefined, undefined, undefined));
  return Belt_Array.concat([selectionWithoutFilters], selectionsWithFilters);
}

function makeOrThrow(addresses, topicSelections) {
  var topicSelections$1 = compressTopicSelectionsOrThrow(topicSelections);
  return {
          addresses: addresses,
          topicSelections: topicSelections$1
        };
}

exports.MissingRequiredTopic0 = MissingRequiredTopic0;
exports.makeTopicSelection = makeTopicSelection;
exports.hasFilters = hasFilters;
exports.compressTopicSelectionsOrThrow = compressTopicSelectionsOrThrow;
exports.makeOrThrow = makeOrThrow;
/* Utils Not a pure module */
