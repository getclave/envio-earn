// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S_Core$RescriptSchema from "./S_Core.bs.mjs";

var Path = S_Core$RescriptSchema.Path;

var Raised = S_Core$RescriptSchema.Raised;

var $$Error = S_Core$RescriptSchema.$$Error;

var Literal = S_Core$RescriptSchema.Literal;

var never = S_Core$RescriptSchema.never;

var unknown = S_Core$RescriptSchema.unknown;

var unit = S_Core$RescriptSchema.unit;

var string = S_Core$RescriptSchema.string;

var bool = S_Core$RescriptSchema.bool;

var $$int = S_Core$RescriptSchema.$$int;

var $$float = S_Core$RescriptSchema.$$float;

var json = S_Core$RescriptSchema.json;

var literal = S_Core$RescriptSchema.literal;

var array = S_Core$RescriptSchema.array;

var list = S_Core$RescriptSchema.list;

var dict = S_Core$RescriptSchema.dict;

var option = S_Core$RescriptSchema.option;

var $$null = S_Core$RescriptSchema.$$null;

var nullable = S_Core$RescriptSchema.nullable;

var jsonString = S_Core$RescriptSchema.jsonString;

var union = S_Core$RescriptSchema.union;

var Catch = S_Core$RescriptSchema.Catch;

var $$catch = S_Core$RescriptSchema.$$catch;

var describe = S_Core$RescriptSchema.describe;

var description = S_Core$RescriptSchema.description;

var deprecate = S_Core$RescriptSchema.deprecate;

var deprecation = S_Core$RescriptSchema.deprecation;

var transform = S_Core$RescriptSchema.transform;

var preprocess = S_Core$RescriptSchema.preprocess;

var custom = S_Core$RescriptSchema.custom;

var refine = S_Core$RescriptSchema.refine;

var variant = S_Core$RescriptSchema.variant;

var parseWith = S_Core$RescriptSchema.parseWith;

var parseAnyWith = S_Core$RescriptSchema.parseAnyWith;

var parseJsonStringWith = S_Core$RescriptSchema.parseJsonStringWith;

var parseOrRaiseWith = S_Core$RescriptSchema.parseOrRaiseWith;

var parseAnyOrRaiseWith = S_Core$RescriptSchema.parseAnyOrRaiseWith;

var parseAsyncWith = S_Core$RescriptSchema.parseAsyncWith;

var parseAnyAsyncWith = S_Core$RescriptSchema.parseAnyAsyncWith;

var serializeWith = S_Core$RescriptSchema.serializeWith;

var serializeToUnknownWith = S_Core$RescriptSchema.serializeToUnknownWith;

var serializeToJsonStringWith = S_Core$RescriptSchema.serializeToJsonStringWith;

var serializeOrRaiseWith = S_Core$RescriptSchema.serializeOrRaiseWith;

var serializeToUnknownOrRaiseWith = S_Core$RescriptSchema.serializeToUnknownOrRaiseWith;

var serializeToJsonStringOrRaiseWith = S_Core$RescriptSchema.serializeToJsonStringOrRaiseWith;

var assertOrRaiseWith = S_Core$RescriptSchema.assertOrRaiseWith;

var isAsyncParse = S_Core$RescriptSchema.isAsyncParse;

var recursive = S_Core$RescriptSchema.recursive;

var classify = S_Core$RescriptSchema.classify;

var setName = S_Core$RescriptSchema.setName;

var Schema = S_Core$RescriptSchema.Schema;

var schema = S_Core$RescriptSchema.schema;

var $$Object = S_Core$RescriptSchema.$$Object;

var object = S_Core$RescriptSchema.object;

var Tuple = S_Core$RescriptSchema.Tuple;

var tuple = S_Core$RescriptSchema.tuple;

var tuple1 = S_Core$RescriptSchema.tuple1;

var tuple2 = S_Core$RescriptSchema.tuple2;

var tuple3 = S_Core$RescriptSchema.tuple3;

var $$Option = S_Core$RescriptSchema.$$Option;

var $$String = S_Core$RescriptSchema.$$String;

var Int = S_Core$RescriptSchema.Int;

var Float = S_Core$RescriptSchema.Float;

var $$Array = S_Core$RescriptSchema.$$Array;

var Metadata = S_Core$RescriptSchema.Metadata;

var inline = S_Core$RescriptSchema.inline;

var intMin = S_Core$RescriptSchema.intMin;

var intMax = S_Core$RescriptSchema.intMax;

var port = S_Core$RescriptSchema.port;

var floatMin = S_Core$RescriptSchema.floatMin;

var floatMax = S_Core$RescriptSchema.floatMax;

var arrayMinLength = S_Core$RescriptSchema.arrayMinLength;

var arrayMaxLength = S_Core$RescriptSchema.arrayMaxLength;

var arrayLength = S_Core$RescriptSchema.arrayLength;

var stringMinLength = S_Core$RescriptSchema.stringMinLength;

var stringMaxLength = S_Core$RescriptSchema.stringMaxLength;

var stringLength = S_Core$RescriptSchema.stringLength;

var email = S_Core$RescriptSchema.email;

var uuid = S_Core$RescriptSchema.uuid;

var cuid = S_Core$RescriptSchema.cuid;

var url = S_Core$RescriptSchema.url;

var pattern = S_Core$RescriptSchema.pattern;

var datetime = S_Core$RescriptSchema.datetime;

var trim = S_Core$RescriptSchema.trim;

var setGlobalConfig = S_Core$RescriptSchema.setGlobalConfig;

export {
  Path ,
  Raised ,
  $$Error ,
  Literal ,
  never ,
  unknown ,
  unit ,
  string ,
  bool ,
  $$int ,
  $$float ,
  json ,
  literal ,
  array ,
  list ,
  dict ,
  option ,
  $$null ,
  nullable ,
  jsonString ,
  union ,
  Catch ,
  $$catch ,
  describe ,
  description ,
  deprecate ,
  deprecation ,
  transform ,
  preprocess ,
  custom ,
  refine ,
  variant ,
  parseWith ,
  parseAnyWith ,
  parseJsonStringWith ,
  parseOrRaiseWith ,
  parseAnyOrRaiseWith ,
  parseAsyncWith ,
  parseAnyAsyncWith ,
  serializeWith ,
  serializeToUnknownWith ,
  serializeToJsonStringWith ,
  serializeOrRaiseWith ,
  serializeToUnknownOrRaiseWith ,
  serializeToJsonStringOrRaiseWith ,
  assertOrRaiseWith ,
  isAsyncParse ,
  recursive ,
  classify ,
  setName ,
  Schema ,
  schema ,
  $$Object ,
  object ,
  Tuple ,
  tuple ,
  tuple1 ,
  tuple2 ,
  tuple3 ,
  $$Option ,
  $$String ,
  Int ,
  Float ,
  $$Array ,
  Metadata ,
  inline ,
  intMin ,
  intMax ,
  port ,
  floatMin ,
  floatMax ,
  arrayMinLength ,
  arrayMaxLength ,
  arrayLength ,
  stringMinLength ,
  stringMaxLength ,
  stringLength ,
  email ,
  uuid ,
  cuid ,
  url ,
  pattern ,
  datetime ,
  trim ,
  setGlobalConfig ,
}
/* S_Core-RescriptSchema Not a pure module */
